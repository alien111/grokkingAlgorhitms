#_page148_

"""Жадный алгоритм — алгоритм, заключающийся в принятии локально оптимальных решений на каждом этапе, допуская, что конечное решение также окажется оптимальным.
"""

states_needed = set([“mt”, “wa”, “or”, “id”, “nv”, “ut”, “ca”, “az”]) # передаем массив и получаем набор.

>>> arr = [1, 2, 2, 3, 3, 3]

>>> set(arr)
set([1, 2, 3])


stations = {}
stations[“kone”] = set([“id”, “nv”, “ut”])
stations[“ktwo”] = set([“wa”, “id”, “mt”])
stations[“kthree”] = set([“or”, “nv”, “ca”])
stations[“kfour”] = set([“nv”, “ut”])
stations[“kfive”] = set([“ca”, “az”])

final_stations = set()

best_station = None
states_covered = set()
for station, states_for_station in stations.items():
	covered = states_needed & states_for_station
	if len(covered) > len(states_covered):                    # New syntax! This is called a set intersection.
 		best_station = station
 		states_covered = covered
		
>>> fruits = set([“avocado”, “tomato”, “banana”])
>>> vegetables = set([“beets”, “carrots”, “tomato”])
>>> fruits | vegetables                                       # Объединение наборов.
set([“avocado”, “beets”, “carrots”, “tomato”, “banana”])
>>> fruits & vegetables                                       # Пересечение наборов.
set([“tomato”])
>>> fruits – vegetables                                       # Разность наборов.
set([“avocado”, “banana”])




#_FINALCODE_

while states_needed:
	best_station = None
	states_covered = set()
	for station, states in stations.items():
		covered = states_needed & states
		if len(covered) > len(states_covered):
			best_station = station
			states_covered = covered

states_needed -= states_covered
final_stations.add(best_station)

>>> print final_stations
set([‘ktwo’, ‘kthree’, ‘kone’, ‘kfive’])


#Код работает корректно.
