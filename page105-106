#_page105_

"""Граф – совокупность точек, соединенных линиями. Точки называются вершинами, или узлами, а линии – ребрами, или дугами.

Есть несколько способов представления графа в памяти компьютера.

Способ первый: массив ребер.
Пусть в графе M ребер. Заведем массив размером Mx2, в котором будем хранить ребра парами вершин, которые они соединяют. Это наиболее понятный, но достаточно неудобный способ хранения графа. Однако у него есть один большой плюс - при таком способе представления легко вводить дополнительные характеристики ребер. Например, чтобы сохранить веса ребер, достаточно сделать массив размером Mx3 и в дополнительную ячейку для каждого ребра записать его вес.

Способ второй: матрица смежности.
Пусть в графе N вершин. Заведем матрицу размером NxN, где в элемент ai,j запишем количество ребер из вершины i в вершину j. Если граф взвешенный, то вместо количества запишем вес соответствующего ребра. В случае отсутствия ребра запишем бесконечность. Таким образом, проявился один из недостатков такого представления: в матрице смежности невозможно хранить взвешенный граф с кратными ребрами. Однако, в некоторых случаях, это можно обойти. Очень часто из всего множества ребер между данной парой вершин нам достаточно хранить только одно - самое легкое.
"""

graph = {}
graph["you"] = ["alice", "bob", "claire"]

"""
graph[“you”] выдаст массив всех соседей “you”.
Граф - это просто множество узлов и ребер, поэтому это все, что нужно, чтобы представить граф в Python.
Граф побольше ->
"""

graph = {}
graph["you"] = ["alice", "bob", "claire"]
graph["bob"] = ["anuj", "peggy"]
graph["alice"] = ["peggy"]
graph["claire"] = ["thom", "jonny"]
graph["anuj"] = []
graph["peggy"] = []
graph["thom"] = []
graph["jonny"] = []

"""
Pop quiz: Важен ли порядок добавления ключей/значений?
Можно ли это:
graph[“claire”] = [“thom”, “jonny”]
graph[“anuj”] = []
Заменить этим:
graph[“anuj”] = []
graph[“claire”] = [“thom”, “jonny”]
Можно. В хэш-таблицах нет порядка, поэтому неважно в каком порядке вы добавляете ключи/значения.
"""

